#!/usr/bin/env python
"""
Test script to verify automated event generation works correctly.

This script creates, updates, and deletes supply chain entities to test
that events are automatically generated by Django signals.
"""

import os
import sys
import django
import uuid

# Setup Django environment
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'api.settings')
django.setup()

from supplychain.models import Product, Batch, Pack, Shipment, Event
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import date, timedelta

User = get_user_model()

def test_automated_events():
    """Test that events are automatically generated for CRUD operations."""
    
    print("🧪 Testing Automated Event Generation")
    print("=" * 50)
    
    # Get initial event count
    initial_event_count = Event.objects.count()
    print(f"Initial event count: {initial_event_count}")
    
    # Create a test user (for context if available)
    test_user = None
    username = f"test_automation_{uuid.uuid4().hex[:8]}"
    try:
        test_user = User.objects.create_user(
            username=username,
            email=f'{username}@automation.com',
            first_name='Test',
            last_name='Automation'
        )
        print(f"✅ Created test user: {test_user.username}")
    except Exception as e:
        print(f"⚠️  Could not create test user: {e}")
    
    print("\n1. Testing Product Operations")
    print("-" * 30)
    
    # Test Product creation with unique GTIN
    unique_gtin = uuid.uuid4().hex[:14]
    product = Product.objects.create(
        gtin=unique_gtin,
        name="Test Automated Product",
        description="A product to test automated event generation",
        form="tablet",
        strength="500mg",
        status="active",
        manufacturer="Test Pharma Co."
    )
    print(f"✅ Created product: {product.name} (GTIN: {product.gtin})")
    
    # Test Product update
    product.status = "inactive"
    product.save()
    print(f"✅ Updated product status to: {product.status}")
    
    print("\n2. Testing Batch Operations")
    print("-" * 30)
    
    # Test Batch creation with unique lot number
    unique_lot = f"BATCH_{uuid.uuid4().hex[:8]}"
    batch = Batch.objects.create(
        product=product,
        lot_number=unique_lot,
        manufacturing_date=date.today() - timedelta(days=30),
        expiry_date=date.today() + timedelta(days=365),
        quantity_produced=1000,
        manufacturing_location="Test Facility",
        status="active"
    )
    print(f"✅ Created batch: {batch.lot_number}")
    
    # Test Batch update
    batch.status = "released"
    batch.save()
    print(f"✅ Updated batch status to: {batch.status}")
    
    print("\n3. Testing Pack Operations")
    print("-" * 30)
    
    # Test Pack creation with unique serial
    unique_serial = f"PKG_{uuid.uuid4().hex[:8]}"
    pack = Pack.objects.create(
        batch=batch,
        serial_number=unique_serial,
        pack_size=30,
        pack_type="bottle",
        status="active",
        location="Warehouse A"
    )
    print(f"✅ Created pack: {pack.serial_number}")
    
    # Test Pack update
    pack.status = "shipped"
    pack.location = "In Transit"
    pack.save()
    print(f"✅ Updated pack status to: {pack.status}")
    
    print("\n4. Testing Shipment Operations")
    print("-" * 30)
    
    # Test Shipment creation with unique tracking number
    unique_tracking = f"SHIP_{uuid.uuid4().hex[:8]}"
    shipment = Shipment.objects.create(
        tracking_number=unique_tracking,
        carrier="ups",
        service_type="standard",
        status="pending",
        origin_name="Test Warehouse",
        origin_address_line1="123 Test St",
        origin_city="Test City",
        origin_state="Test State", 
        origin_postal_code="12345",
        origin_country="USA",
        destination_name="Test Customer",
        destination_address_line1="456 Customer Ave",
        destination_city="Customer City",
        destination_state="Customer State",
        destination_postal_code="67890",
        destination_country="USA",
        shipped_date=timezone.now()
    )
    print(f"✅ Created shipment: {shipment.tracking_number}")
    
    # Add pack to shipment
    shipment.packs.add(pack)
    print(f"✅ Added pack to shipment")
    
    # Test Shipment status update
    shipment.status = "in_transit"
    shipment.save()
    print(f"✅ Updated shipment status to: {shipment.status}")
    
    print("\n5. Checking Generated Events")
    print("-" * 30)
    
    # Get all events created during this test
    final_event_count = Event.objects.count()
    new_events_count = final_event_count - initial_event_count
    
    print(f"Final event count: {final_event_count}")
    print(f"New events generated: {new_events_count}")
    
    if new_events_count > 0:
        print("\n📋 Recent Events Generated:")
        recent_events = Event.objects.order_by('-timestamp')[:new_events_count]
        
        for i, event in enumerate(recent_events, 1):
            print(f"{i:2d}. [{event.event_type.upper()}] {event.entity_type} #{event.entity_id}")
            print(f"    {event.description}")
            print(f"    Severity: {event.severity} | Time: {event.timestamp.strftime('%H:%M:%S')}")
            if event.metadata.get('automated'):
                print(f"    ✅ Automated event (trigger: {event.metadata.get('trigger', 'unknown')})")
            if event.metadata.get('changes'):
                print(f"    📝 Changes: {event.metadata['changes']}")
            print()
    
    print("\n6. Testing Deletion")
    print("-" * 30)
    
    # Test deletion events
    pack.delete()
    print(f"✅ Deleted pack: {pack.serial_number}")
    
    batch.delete()
    print(f"✅ Deleted batch: {batch.lot_number}")
    
    shipment.delete()
    print(f"✅ Deleted shipment: {shipment.tracking_number}")
    
    product.delete()
    print(f"✅ Deleted product: {product.name}")
    
    # Check final event count
    final_final_count = Event.objects.count()
    total_new_events = final_final_count - initial_event_count
    deletion_events = final_final_count - final_event_count
    
    print(f"\nFinal Summary:")
    print(f"Total new events: {total_new_events}")
    print(f"Deletion events: {deletion_events}")
    
    if total_new_events > 0:
        print("\n🎉 Automated event generation is working!")
        print("✅ Events are being created for:")
        print("   - Entity creation")
        print("   - Entity updates") 
        print("   - Status changes")
        print("   - Entity deletion")
        print("   - M2M relationship changes")
        
        # Show breakdown of event types
        automation_events = Event.objects.filter(
            timestamp__gte=Event.objects.order_by('-timestamp')[total_new_events-1].timestamp
        ).order_by('-timestamp')[:total_new_events]
        
        event_types = {}
        for event in automation_events:
            if event.metadata.get('automated'):
                event_types[event.event_type] = event_types.get(event.event_type, 0) + 1
        
        if event_types:
            print("\n📊 Event Types Generated:")
            for event_type, count in event_types.items():
                print(f"   - {event_type}: {count}")
                
    else:
        print("\n❌ No events were generated. Check signal configuration.")
    
    # Clean up test user if we created it
    if test_user:
        test_user.delete()
        print(f"\n🧹 Cleaned up test user: {test_user.username}")

if __name__ == "__main__":
    test_automated_events()
